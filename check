#!/bin/bash

print_help(){
    echo "$0 [options] DIMACS LRAT"
    echo ""
    echo "$0:  Check an LRAT proof"
    echo ""
    echo "DIMACS             original problem in DIMACS format"
    echo "LRAT               proof of unsatisfiability in LRAT format"
    echo ""
    echo "options:"
    echo "-h, --help         show brief help"
    echo "--output <base>    output Lambda Prolog code to module base"
    echo "--force            force overwriting existing files"
}


force=false
output_file="output"


#check the arguments
while test $# -gt 0; do
  case "$1" in
      -h|--help)
          print_help
          exit 0
          ;;
      --force)
          force=true
          shift
          ;;
      --output)
          shift
          output_file=$1
          shift
          ;;
      -*)
          echo "Unknown argument $1"
          print_help
          exit 1
          ;;
      *)
          break
          ;;
  esac
done

if test $# -lt 2; then
    echo "Not enough arguments"
    print_help
    exit 1
elif test $# -gt 2; then
    echo "Too many arguments"
    print_help
    exit 1
fi

dimacs_file=$1
lrat_file=$2


#compile the file into Lambda Prolog
echo "Compiling to Lambda Prolog"
if $force; then
    src/encode.py --force $dimacs_file $lrat_file build/$output_file
else
    src/encode.py $dimacs_file $lrat_file build/$output_file
fi
res=$?
if ! [ $res -eq 0 ]; then
    echo "Compilation to Lambda Prolog exited with return code $res"
    exit 2
fi
echo


#compile and link the Lambda Prolog program
cd build
echo "Compiling Lambda Prolog output"
TJPATH=../src tjcc $output_file -o $output_file.lpo
res=$?
if ! [ $res -eq 0 ]; then
    echo "Compiling Lambda Prolog program exited with return code $res"
    exit 3
fi
echo

echo "Linking Lambda Prolog output"
tjlink $output_file
res=$?
if ! [ $res -eq 0 ]; then
    echo "Linking Lambda Prolog program exited with return code $res"
    exit 4
fi
echo


#run it and try it to get a result
lpcmd="proof_name a_proof P, check_proof P."
lpresult=$(echo $lpcmd | tjsim $output_file)
res=$?
if ! [ $res -eq 0 ]; then
    echo "Running Lambda prolog program exited with return code $res"
    exit 5
fi

echo $lpresult | grep -q "no (more) solutions"
res=$?
if [ $res -eq 0 ]; then
    echo "UNVERIFED"
else
    echo "VERIFIED"
fi
exit 0

