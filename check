#!/bin/bash

print_help(){
    echo "$0 [options] DIMACS PROOF"
    echo ""
    echo "$0:  Check an unsatisfiability proof"
    echo ""
    echo "DIMACS             original problem in DIMACS format"
    echo "PROOF              proof of unsatisfiability"
    echo ""
    echo "options:"
    echo "-h, --help               show brief help"
    echo "-p, --proof-type <arg>   read PROOF as this proof type (LRAT, FRAT, DRAT)"
    echo "--output <base>          output Lambda Prolog code to module base"
    echo "--no-force               don't force overwriting existing files"
}


force=true
output_file="output"
output_type_given=false
output_type="lrat"


#check the arguments
while test $# -gt 0; do
  case "$1" in
      -h|--help)
          print_help
          exit 0
          ;;
      -p|--proof-type)
          if $output_type_given; then
              echo "Can only give proof type once"
              exit 1
          fi
          case "$2" in
              lrat|LRAT)
              ;;
              frat|FRAT)
              ;;
              drat|DRAT)
              ;;
              *)
                  echo "Proof type must be LRAT, FRAT, or DRAT"
                  print_help
                  exit 1
                  ;;
          esac
          output_type_given=true
          output_type="$2"
          #get rid of the flag and argument
          shift
          shift
          ;;
      --force)
          force=false
          shift
          ;;
      --output)
          shift
          output_file=$1
          shift
          ;;
      -*)
          echo "Unknown argument $1"
          print_help
          exit 1
          ;;
      *)
          break
          ;;
  esac
done

if test $# -lt 2; then
    echo "Not enough arguments"
    print_help
    exit 1
elif test $# -gt 2; then
    echo "Too many arguments"
    print_help
    exit 1
fi

dimacs_file=$1
proof_file=$2


#make sure the .lpo files are good
make


#compile the file into Lambda Prolog
echo "Compiling to Lambda Prolog"
if $force; then
    python3 src/encode.py --proof-type "$output_type" --force \
            $dimacs_file $proof_file build/$output_file; res=$?
else
    python3 src/encode.py --proof-type "$output_type" $dimacs_file \
            $proof_file build/$output_file; res=$?
fi
if [ ! $res -eq 0 ]; then
    echo "Compilation to Lambda Prolog exited with return code $res"
    exit 2
fi
echo


#compile and link the Lambda Prolog program
cd build
echo "Compiling Lambda Prolog output"
TJPATH=../src tjcc $output_file -o $output_file.lpo; res=$?
if ! [ $res -eq 0 ]; then
    echo "Compiling Lambda Prolog program exited with return code $res"
    exit 3
fi
echo

echo "Linking Lambda Prolog output"
tjlink $output_file; res=$?
if ! [ $res -eq 0 ]; then
    echo "Linking Lambda Prolog program exited with return code $res"
    exit 4
fi
echo


#run it and try it to get a result
lpresult=$(cat "$output_file.problem" | tjsim $output_file); res=$?
if ! [ $res -eq 0 ]; then
    echo "Running Lambda prolog program exited with return code $res"
    exit 5
fi

echo $lpresult | grep -q "no (more) solutions"; res=$?
if [ $res -eq 0 ]; then
    echo "UNVERIFED"
else
    echo "VERIFIED"
fi
exit 0

